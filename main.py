from fastapi import FastAPI
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from typing import Union

app = FastAPI(
    title="FastAPI Hello World",
    description="–ü—Ä–æ—Å—Ç–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–≤—É–º—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏",
    version="1.0.0"
)

class SumRequest(BaseModel):
    a: Union[int, float]
    b: Union[int, float]

class SumResponse(BaseModel):
    result: Union[int, float]

@app.get("/", response_class=HTMLResponse)
async def root():
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>FastAPI Hello World</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .endpoint {
                background: rgba(255, 255, 255, 0.2);
                padding: 15px;
                margin: 15px 0;
                border-radius: 10px;
                border-left: 4px solid #4CAF50;
            }
            .method {
                font-weight: bold;
                color: #4CAF50;
                font-size: 1.1em;
            }
            .url {
                font-family: 'Courier New', monospace;
                background: rgba(0,0,0,0.2);
                padding: 5px 10px;
                border-radius: 5px;
                margin: 5px 0;
            }
            .description {
                margin-top: 10px;
                opacity: 0.9;
            }
            .docs-link {
                text-align: center;
                margin-top: 30px;
            }
            .docs-link a {
                color: #FFD700;
                text-decoration: none;
                font-size: 1.2em;
                padding: 10px 20px;
                background: rgba(255, 215, 0, 0.2);
                border-radius: 25px;
                transition: all 0.3s ease;
            }
            .docs-link a:hover {
                background: rgba(255, 215, 0, 0.4);
                transform: translateY(-2px);
            }
            .microphone-section {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                margin: 20px 0;
                border-radius: 10px;
                border-left: 4px solid #FF6B6B;
            }
            .microphone-status {
                display: flex;
                align-items: center;
                gap: 10px;
                margin: 10px 0;
            }
            .status-indicator {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: #ccc;
            }
            .status-indicator.available {
                background: #4CAF50;
                box-shadow: 0 0 10px #4CAF50;
            }
            .status-indicator.denied {
                background: #f44336;
                box-shadow: 0 0 10px #f44336;
            }
            .status-indicator.checking {
                background: #ff9800;
                animation: pulse 1s infinite;
            }
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.5; }
                100% { opacity: 1; }
            }
            .mic-button {
                background: linear-gradient(45deg, #FF6B6B, #FF8E8E);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 25px;
                cursor: pointer;
                font-size: 1em;
                transition: all 0.3s ease;
                margin: 10px 5px;
            }
            .mic-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
            }
            .mic-button:disabled {
                background: #ccc;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }
            .mic-info {
                font-size: 0.9em;
                opacity: 0.8;
                margin-top: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ FastAPI Hello World</h1>
            <p style="text-align: center; font-size: 1.2em; margin-bottom: 30px;">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
            </p>
            
            <div class="endpoint">
                <div class="method">GET</div>
                <div class="url">/helloworld</div>
                <div class="description">–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "Hello, World!"</div>
            </div>
            
            <div class="endpoint">
                <div class="method">POST</div>
                <div class="url">/sum</div>
                <div class="description">–°—É–º–º–∏—Ä—É–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON: {"a": —á–∏—Å–ª–æ1, "b": —á–∏—Å–ª–æ2}</div>
            </div>
            
            <div class="microphone-section">
                <h3>üé§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</h3>
                <div class="microphone-status">
                    <div class="status-indicator" id="micStatus"></div>
                    <span id="micStatusText">–°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω</span>
                </div>
                <button class="mic-button" id="checkMicBtn" onclick="checkMicrophone()">
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω
                </button>
                <button class="mic-button" id="requestMicBtn" onclick="requestMicrophonePermission()" style="display: none;">
                    –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                </button>
                <div class="mic-info" id="micInfo">
                    –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                </div>
            </div>
            
            <div class="docs-link">
                <a href="/docs" target="_blank">üìö –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API</a>
            </div>
        </div>
        
        <script>
            let mediaStream = null;
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            async function checkMicrophone() {
                const statusIndicator = document.getElementById('micStatus');
                const statusText = document.getElementById('micStatusText');
                const checkBtn = document.getElementById('checkMicBtn');
                const requestBtn = document.getElementById('requestMicBtn');
                const micInfo = document.getElementById('micInfo');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø—Ä–æ–≤–µ—Ä–∫–∞"
                statusIndicator.className = 'status-indicator checking';
                statusText.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...';
                checkBtn.disabled = true;
                micInfo.textContent = '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...';
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É getUserMedia
                    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                        throw new Error('getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    const permissionStatus = await navigator.permissions.query({ name: 'microphone' });
                    
                    if (permissionStatus.state === 'granted') {
                        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –¥–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                        await testMicrophoneAccess();
                        updateStatus('available', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                        requestBtn.style.display = 'none';
                    } else if (permissionStatus.state === 'denied') {
                        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
                        updateStatus('denied', '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.');
                        requestBtn.style.display = 'none';
                    } else {
                        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å
                        updateStatus('denied', '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω', '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
                        requestBtn.style.display = 'inline-block';
                    }
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
                    updateStatus('denied', '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É', `–û—à–∏–±–∫–∞: ${error.message}`);
                    requestBtn.style.display = 'none';
                } finally {
                    checkBtn.disabled = false;
                }
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
            async function testMicrophoneAccess() {
                return new Promise((resolve, reject) => {
                    navigator.mediaDevices.getUserMedia({ audio: true })
                        .then(stream => {
                            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Ç–æ–∫, —Å—Ä–∞–∑—É –µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                            stream.getTracks().forEach(track => track.stop());
                            resolve();
                        })
                        .catch(reject);
                });
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            async function requestMicrophonePermission() {
                const statusIndicator = document.getElementById('micStatus');
                const statusText = document.getElementById('micStatusText');
                const requestBtn = document.getElementById('requestMicBtn');
                const micInfo = document.getElementById('micInfo');
                
                statusIndicator.className = 'status-indicator checking';
                statusText.textContent = '–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...';
                requestBtn.disabled = true;
                micInfo.textContent = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...';
                
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Ç–æ–∫, –∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–∞–Ω–æ
                    updateStatus('available', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                    requestBtn.style.display = 'none';
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    stream.getTracks().forEach(track => track.stop());
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
                    
                    if (error.name === 'NotAllowedError') {
                        updateStatus('denied', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
                    } else if (error.name === 'NotFoundError') {
                        updateStatus('denied', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', '–ù–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω');
                    } else if (error.name === 'NotReadableError') {
                        updateStatus('denied', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
                    } else {
                        updateStatus('denied', '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞', `–û—à–∏–±–∫–∞: ${error.message}`);
                    }
                    requestBtn.style.display = 'none';
                } finally {
                    requestBtn.disabled = false;
                }
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            function updateStatus(status, text, info) {
                const statusIndicator = document.getElementById('micStatus');
                const statusText = document.getElementById('micStatusText');
                const micInfo = document.getElementById('micInfo');
                
                statusIndicator.className = `status-indicator ${status}`;
                statusText.textContent = text;
                micInfo.textContent = info;
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.addEventListener('load', () => {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                setTimeout(() => {
                    checkMicrophone();
                }, 1000);
            });
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/helloworld")
async def hello_world():
    return {"message": "Hello, World!"}

@app.post("/sum", response_model=SumResponse)
async def sum_numbers(request: SumRequest):
    result = request.a + request.b
    return SumResponse(result=result)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
